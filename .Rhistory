## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
setMatrix <- function(y) {
x <<- y
inv <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inverseMatrix <<- inverse
getInverse <- function() inverseMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inverseMatrix)) {
message("getting cached data")
return(inverseMatrix)
}
mat <- x$getMatrix()
inv <- solve(mat, ...)
x$setInverse(inverseMatrix)
inverseMatrix
}
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL # sets the value of inverseMatrix to NULL (provides a default if cacheSolve hasn't been used yet)
setMatrix <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inverseMatrix <<- inverse
getInverse <- function() inverseMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inverseMatrix)) {
message("getting cached data")
return(inverseMatrix)
}
mat <- x$getMatrix()
inverseMatrix <- solve(mat, ...)
x$setInverse(inverseMatrix)
inverseMatrix
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
> my_matrix$getMatrix()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getMatrix()
my_matrix$getInverse()
cacheSolve(my_matrix)
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL # sets the value of inverseMatrix to NULL (provides a default if cacheSolve hasn't been used yet)
setMatrix <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inverseMatrix <<- inverse
getInverse <- function() inverseMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseMatrix <- x$getInverse()
if (!is.null(inverseMatrix)) {
message("getting cached data")
return(inverseMatrix)
}
mat <- x$getMatrix()
inverseMatrix <- solve(mat, ...)
x$setInverse(inverseMatrix)
inverseMatrix
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getMatrix()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL # sets the value of inverseMatrix to NULL (provides a default if cacheSolve hasn't been used yet)
setMatrix <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inverseMatrix <<- inverse
getInverse <- function() inverseMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseMatrix <- x$getInverse()
if (!is.null(inverseMatrix)) {
message("Matrix is already inversed. See the cashed data.")
return(inverseMatrix)
}
mat <- x$getMatrix()
inverseMatrix <- solve(mat, ...)
x$setInverse(inverseMatrix)
inverseMatrix
}
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$setMatrix(matrix(c(2, 2, 1, 4), 2, 2))
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL # sets the value of inverseMatrix to NULL (provides a default if cacheSolve hasn't been used yet)
setMatrix <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverse) inverseMatrix <<- inverse
getInverse <- function() inverseMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseMatrix <- x$getInverse()
if (!is.null(inverseMatrix)) {
message("Matrix is already inversed. See the cashed data.")
return(inverseMatrix)
}
mat <- x$getMatrix()
inverseMatrix <- solve(mat, ...)
x$setInverse(inverseMatrix)
inverseMatrix
}
my_matrix$setMatrix(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$getMatrix()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
